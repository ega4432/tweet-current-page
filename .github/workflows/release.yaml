name: release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

  workflow_dispatch:
    inputs:
      version:
        required: true
        type: string
        description: 'Deploy version without "v" ( ex: *.*.* )'
        default: ""

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3 # https://github.com/actions/setup-node
        with:
          node-version-file: .node-version
          cache: "yarn"

      # example: https://github.com/actions/cache/blob/main/examples.md#node---yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache dependencies
        uses: actions/cache@v3 # https://github.com/actions/cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build
        run: yarn build

      - name: Get version from tag
        id: variables
        shell: bash
        run: |
          echo "github.event_name is: ${{ github.event_name }}"

          VERSION=''
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            echo "Invalid event type"
            exit 1
          fi

          echo ::set-output name=VERSION::$VERSION

      - name: Update manifest.json
        shell: bash
        run: |
          echo "target version is: ${{ steps.variables.outputs.VERSION }}"

          jq '.version="${{ steps.variables.outputs.VERSION }}"' ./dist/manifest.json > tmp.json
          mv tmp.json ./dist/manifest.json

          cat ./dist/manifest.json

      - name: Zip distributing package
        run: ./scripts/build.sh

      - name: Upload and Publish
        # Ref: https://github.com/fregante/chrome-webstore-upload-cli
        run: npx chrome-webstore-upload-cli@2 upload --source extension.zip --auto-publish
        env:
          EXTENSION_ID: "${{ secrets.EXTENSION_ID }}"
          CLIENT_ID: "${{ secrets.CLIENT_ID }}"
          CLIENT_SECRET: "${{ secrets.CLIENT_SECRET }}"
          REFRESH_TOKEN: "${{ secrets.REFRESH_TOKEN }}"

      - name: Create new release
        # Ref: https://github.com/marvinpinto/action-automatic-releases
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          title: "Release ${{ steps.variables.outputs.VERSION }}"
          files: |
            LICENSE
            extension.zip
